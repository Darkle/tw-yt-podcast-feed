import util from 'util'
import path from 'path'
import { execFile } from 'child_process'

import Parser from 'rss-parser'
import Maybe, {Just, Nothing} from 'folktale/maybe'

import { updateRSSfeed } from './updateFeed.lsc'
import { getDB, updateDBwithMostRecentDownload } from './db.lsc'

pexecFile = util.promisify(execFile)

ytChannelFeed = 'https://www.youtube.com/feeds/videos.xml?channel_id=UC3s0BtrBJpwNDaflRSoiieQ'
projectPath = path.resolve(__dirname, '..')
youtubedlBinaryPath = path.join(projectPath, 'youtube-dl-binary', 'youtube-dl')

type TwVideos = Array<TwVideo>;
type TwVideo = {
  title: string,
  link: string,
  pubDate: string,
  author: string,
  id: string,
  isoDate: string
};

feedParser = new Parser()

getNewTWvideos() ->
  feedParser.parseURL(ytChannelFeed)
    .then(getTWvideosFromFeed)
    .then(downloadNewVideo)
    .then(updateRSSfeed)
    .catch(e -> console.error(e))

getTWvideosFromFeed({items: videos}:{videos: TwVideos}):TwVideos ->
  videos.filter(video -> video.title.toLowerCase().includes('threatwire'))

downloadNewVideo(twVideos:TwVideos):Nothing|Promise<Just<TwVideos>> ->  // eslint-disable-line fp/no-nil
  match twVideos:
    | !~shouldDownloadVideo(): Maybe.Nothing()
    | else:
      mostRecentVideo = twVideos[0]
      videoId = mostRecentVideo.id.slice(9)
      saveFilePath = path.join('audioFiles', `${ videoId }.webm`)

      updateDBwithMostRecentDownload(mostRecentVideo)
      pexecFile(
        youtubedlBinaryPath,
        [
          mostRecentVideo.link,
          `-o${ saveFilePath }`,
          '-f bestaudio'
        ]
      )
      .then(() -> console.log(`Download of video ${ videoId } succeeded`))
      .then(() -> Maybe.Just(twVideos))

shouldDownloadVideo(twVideos:TwVideos):boolean ->
  if ISDEV: return true
  twVideos.length && getDB().get('lastVideoPublishDate').value() !== twVideos[0].pubDate

export {
  getNewTWvideos
}


